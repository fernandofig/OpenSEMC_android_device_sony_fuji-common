From f8601045eba59792b97f11c373b2686facf23cff Mon Sep 17 00:00:00 2001
From: Philippe Larrieux <philippe.larrieux@gmail.com>
Date: Mon, 1 Jul 2013 12:20:28 +0200
Subject: [PATCH] Phone: APDU support for EAP-SIM

Change-Id: I6888011817bf2bf34c6c3f09ed676c7714976bee

Conflicts:
	src/com/android/phone/PhoneInterfaceManager.java
---
 src/com/android/phone/PhoneInterfaceManager.java | 252 ++++++++++++++++++++++-
 1 file changed, 250 insertions(+), 2 deletions(-)

diff --git a/src/com/android/phone/PhoneInterfaceManager.java b/src/com/android/phone/PhoneInterfaceManager.java
index b858640..f59f9cc 100644
--- a/src/com/android/phone/PhoneInterfaceManager.java
+++ b/src/com/android/phone/PhoneInterfaceManager.java
@@ -23,6 +23,7 @@ import android.content.Intent;
 import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.AsyncResult;
+import android.os.Process;
 import android.os.Binder;
 import android.os.Bundle;
 import android.os.Handler;
@@ -45,9 +46,15 @@ import com.android.internal.telephony.Phone;
 import com.android.internal.telephony.CallManager;
 import com.android.internal.telephony.PhoneConstants;
 import com.android.internal.telephony.RILConstants;
+import com.android.internal.telephony.IccIoResult;
+import com.android.internal.telephony.IccUtils;
+import com.android.internal.telephony.CommandException;
 
 import java.util.List;
 import java.util.ArrayList;
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
 
 /**
  * Implementation of the ITelephony interface.
@@ -64,7 +71,14 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
     private static final int CMD_ANSWER_RINGING_CALL = 4;
     private static final int CMD_END_CALL = 5;  // not used yet
     private static final int CMD_SILENCE_RINGER = 6;
-    private static final int CMD_TOGGLE_LTE = 7; // not used yet
+    private static final int CMD_EXCHANGE_APDU = 7;
+    private static final int EVENT_EXCHANGE_APDU_DONE = 8;
+    private static final int CMD_OPEN_CHANNEL = 9;
+    private static final int EVENT_OPEN_CHANNEL_DONE = 10;
+    private static final int CMD_CLOSE_CHANNEL = 11;
+    private static final int EVENT_CLOSE_CHANNEL_DONE = 12;
+    private static final int CMD_SIM_IO = 13;
+    private static final int EVENT_SIM_IO_DONE = 14;
 
     /** The singleton instance. */
     private static PhoneInterfaceManager sInstance;
@@ -74,6 +88,25 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
     CallManager mCM;
     MainThreadHandler mMainThreadHandler;
 
+    private int lastError;
+
+    private static final class IccAPDUArgument {
+
+        public int channel, cla, command, p1, p2, p3;
+        public String data;
+
+        public IccAPDUArgument(int cla, int command, int channel,
+                int p1, int p2, int p3, String data) {
+            this.channel = channel;
+            this.cla = cla;
+            this.command = command;
+            this.p1 = p1;
+            this.p2 = p2;
+            this.p3 = p3;
+            this.data = data;
+        }
+    }
+
     /**
      * A request object for use with {@link MainThreadHandler}. Requesters should wait() on the
      * request after sending. The main thread will notify the request when it is complete.
@@ -171,6 +204,141 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
                     }
                     break;
 
+                case CMD_EXCHANGE_APDU:
+                    request = (MainThreadRequest) msg.obj;
+                    IccAPDUArgument argument =
+                            (IccAPDUArgument) request.argument;
+                    onCompleted = obtainMessage(EVENT_EXCHANGE_APDU_DONE,
+                            request);
+                    mPhone.getIccCard().exchangeAPDU(argument.cla,
+                            argument.command,
+                            argument.channel, argument.p1, argument.p2,
+                            argument.p3, argument.data, onCompleted);
+                    break;
+
+                case EVENT_EXCHANGE_APDU_DONE:
+                    ar = (AsyncResult) msg.obj;
+                    request = (MainThreadRequest) ar.userObj;
+                    if (ar.exception == null && ar.result != null) {
+                        request.result = ar.result;
+                        lastError = 0;
+                    } else {
+                        request.result = new IccIoResult(0x6f, 0,
+                                (byte[])null);
+                        lastError = 1;
+                        if ((ar.exception != null) &&
+                                (ar.exception instanceof CommandException)) {
+                            if (((CommandException)ar.exception)
+                                    .getCommandError() ==
+                                    CommandException.Error.INVALID_PARAMETER) {
+                                lastError = 5;
+                            }
+                        }
+                    }
+                    synchronized (request) {
+                        request.notifyAll();
+                    }
+                    break;
+
+                case CMD_OPEN_CHANNEL:
+                    request = (MainThreadRequest) msg.obj;
+                    onCompleted = obtainMessage(EVENT_OPEN_CHANNEL_DONE,
+                            request);
+                    mPhone.getIccCard().openLogicalChannel(
+                            (String)request.argument, onCompleted);
+                    break;
+
+                case EVENT_OPEN_CHANNEL_DONE:
+                    ar = (AsyncResult) msg.obj;
+                    request = (MainThreadRequest) ar.userObj;
+                    if (ar.exception == null && ar.result != null) {
+                        request.result = new Integer(((int[])ar.result)[0]);
+                        lastError = 0;
+                    } else {
+                        request.result = new Integer(0);
+                        lastError = 1;
+                        if ((ar.exception != null) &&
+                                (ar.exception instanceof CommandException)) {
+                            if (((CommandException)ar.exception)
+                                    .getCommandError() ==
+                                    CommandException.Error.MISSING_RESOURCE) {
+                                lastError = 2;
+                            } else {
+                                if (((CommandException)ar.exception)
+                                    .getCommandError() ==
+                                    CommandException.Error.NO_SUCH_ELEMENT) {
+                                    lastError = 3;
+                                }
+                            }
+                        }
+                    }
+                    synchronized (request) {
+                        request.notifyAll();
+                    }
+                    break;
+
+                case CMD_CLOSE_CHANNEL:
+                    request = (MainThreadRequest) msg.obj;
+                    onCompleted = obtainMessage(EVENT_CLOSE_CHANNEL_DONE,
+                            request);
+                    mPhone.getIccCard().closeLogicalChannel(
+                            ((Integer)request.argument).intValue(),
+                            onCompleted);
+                    break;
+
+                case EVENT_CLOSE_CHANNEL_DONE:
+                    ar = (AsyncResult) msg.obj;
+                    request = (MainThreadRequest) ar.userObj;
+                    if (ar.exception == null) {
+                        request.result = new Integer(0);
+                        lastError = 0;
+                    } else {
+                        request.result = new Integer(-1);
+                        lastError = 1;
+                        if ((ar.exception != null) &&
+                                (ar.exception instanceof CommandException)) {
+                            if (((CommandException)ar.exception)
+                                    .getCommandError() ==
+                                    CommandException.Error.INVALID_PARAMETER) {
+                                lastError = 5;
+                            }
+                        }
+                    }
+                    synchronized (request) {
+                        request.notifyAll();
+                    }
+                    break;
+
+               case CMD_SIM_IO:
+                    request = (MainThreadRequest) msg.obj;
+                    IccAPDUArgument parameters =
+                            (IccAPDUArgument) request.argument;
+                    onCompleted = obtainMessage(EVENT_SIM_IO_DONE,request);
+                    mPhone.getIccCard().exchangeSimIO( parameters.cla, /* fileID */
+                           parameters.command,
+                            parameters.p1, parameters.p2, parameters.p3,
+                            parameters.data, onCompleted);
+                    break;
+
+               case EVENT_SIM_IO_DONE:
+                    ar = (AsyncResult) msg.obj;
+                    request = (MainThreadRequest) ar.userObj;
+                    if (ar.exception == null && ar.result != null) {
+                        request.result = ar.result;
+                        lastError = 0;
+                    } else {
+                        request.result = new IccIoResult(0x6f, 0, (byte[])null);
+                        lastError = 1;
+                        if ((ar.exception != null) &&
+                                (ar.exception instanceof CommandException)) {
+                            if (((CommandException)ar.exception).getCommandError() ==
+                                    CommandException.Error.INVALID_PARAMETER) {
+                                lastError = 5;
+                    }}}
+                    synchronized (request) { request.notifyAll(); }
+                    break;
+
+
                 default:
                     Log.w(LOG_TAG, "MainThreadHandler: unexpected message code: " + msg.what);
                     break;
@@ -314,7 +482,7 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
         }
 
         mPhone.setPreferredNetworkType(network,
-                mMainThreadHandler.obtainMessage(CMD_TOGGLE_LTE));
+                mMainThreadHandler.obtainMessage(99));
         android.provider.Settings.Global.putInt(mApp.getContentResolver(),
                 android.provider.Settings.Global.PREFERRED_NETWORK_MODE, network);
     }
@@ -880,4 +1048,84 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
     public int getLteOnGsmMode() {
         return mPhone.getLteOnGsmMode();
     }
+
+    private String exchangeIccAPDU(int cla, int command,
+            int channel, int p1, int p2, int p3, String data) {
+	// PL: FIXME, temporary disable
+	//	if (Binder.getCallingUid() != Process.SMARTCARD_UID)
+	//	    throw new SecurityException("Only Smartcard API may access UICC");
+        Log.d(LOG_TAG, "> exchangeAPDU " + channel + " " + cla + " " +
+                command + " " + p1 + " " + p2 + " " + p3 + " " + data);
+        IccIoResult response =
+                (IccIoResult)sendRequest(CMD_EXCHANGE_APDU,
+                        new IccAPDUArgument(cla, command, channel,
+                        p1, p2, p3, data));
+        Log.d(LOG_TAG, "< exchangeAPDU " + response);
+        String s = Integer.toHexString(
+                (response.sw1 << 8) + response.sw2 + 0x10000).substring(1);
+        if (response.payload != null)
+            s = IccUtils.bytesToHexString(response.payload) + s;
+        return s;
+    }
+
+    public String transmitIccBasicChannel(int cla, int command,
+            int p1, int p2, int p3, String data) {
+        return exchangeIccAPDU(cla, command, 0, p1, p2, p3, data);
+    }
+
+    public String transmitIccLogicalChannel(int cla, int command,
+            int channel, int p1, int p2, int p3, String data) {
+        return exchangeIccAPDU(cla, command, channel, p1, p2, p3, data);
+    }
+
+    public int openIccLogicalChannel(String AID) {
+	// PL: FIXME, temporary disable
+	//	if (Binder.getCallingUid() != Process.SMARTCARD_UID)
+	//	    throw new SecurityException("Only Smartcard API may access UICC");
+        Log.d(LOG_TAG, "> openIccLogicalChannel " + AID);
+        Integer channel = (Integer)sendRequest(CMD_OPEN_CHANNEL, AID);
+        Log.d(LOG_TAG, "< openIccLogicalChannel " + channel);
+        return channel.intValue();
+    }
+
+    public boolean closeIccLogicalChannel(int channel) {
+	// PL: FIXME, temporary disable
+	//	if (Binder.getCallingUid() != Process.SMARTCARD_UID)
+	//	    throw new SecurityException("Only Smartcard API may access UICC");
+        Log.d(LOG_TAG, "> closeIccLogicalChannel " + channel);
+        Integer err = (Integer)sendRequest(CMD_CLOSE_CHANNEL,
+                new Integer(channel));
+        Log.d(LOG_TAG, "< closeIccLogicalChannel " + err);
+        if(err.intValue() == 0)
+            return true;
+        return false;
+    }
+
+    public int getLastError() {
+        return lastError;
+    }
+
+    public byte[] transmitIccSimIO(int fileID, int command,
+                                               int p1, int p2, int p3, String filePath) {
+	// PL: FIXME, temporary disable
+	//	if (Binder.getCallingUid() != Process.SMARTCARD_UID)
+	//	    throw new SecurityException("Only Smartcard API may access UICC");
+        Log.d(LOG_TAG, "Exchange SIM_IO " + fileID + ":" + command + " " +
+                 p1 + " " + p2 + " " + p3 + ":" + filePath);
+        IccIoResult response =
+                (IccIoResult)sendRequest(CMD_SIM_IO,
+                        new IccAPDUArgument(fileID, command, -1,
+                        p1, p2, p3, filePath));
+        Log.d(LOG_TAG, "Exchange SIM_IO [R]" + response);
+        byte[] result=null; int length=2;
+        if (response.payload != null) {
+            length=2+response.payload.length;
+            result=new byte[length];
+            System.arraycopy(response.payload,0,result,0,response.payload.length);
+        } else result=new byte[length];
+        Log.d(LOG_TAG,"Exchange SIM_IO [L] "+length);
+        result[length-1]=(byte)response.sw2;
+        result[length-2]=(byte)response.sw1;
+        return result;
+    }
 }
-- 
1.8.1.2

